{"version":3,"sources":["BaseUrl.js","Components/AlertMessage.js","Components/UnseenMsg.js","Pages/MainApp.js","Pages/LogSign.js","App.js","serviceWorker.js","index.js"],"names":["BaseUrl","AlertMessage","content","type","className","UnseenMsg","me","view_other_messages","POST_active_user","unseen_messages","length","useState","open_msgs","set_open_msgs","onClick","map","msg","index","key","localStorage","setItem","his_messages","info","send_by","_id","talking_to","username","socket","io","MainApp","set_me","users","set_users","active_user","set_active_user","users_go_right","set_users_go_right","message","alert_message","set_alert_message","room_messages","set_room_messages","roomId","set_roomId","set_message","set_unseen_messages","is_writing","set_is_writing","room_body","useRef","GET_all_users","token","getItem","fetch","method","headers","then","res","json","TokenError","clear","window","location","reload","userId","body","JSON","stringify","console","log","yourRoom","POST_room_messages","newRoom","POST_create_room","RoomMessages","un_messages","forEach","push","Date_created_at","Time_created_at","viewed","talkingWith","is_mine","isMsgMine","msg_viewed","emit","useEffect","unseenMessages","copy_unseen_mes","his_msgs","noViewed_messages","noViewed_msg","talked_to","GET_unseen_messages","GET_check_permision","user","on","setTimeout","current","scrollTop","scrollHeight","off","data","copy_unseen_msg","msg_user_found","still_unseen_messages","filter","viewed_by","room_msg_copy","iterations","i","bool_viewed","Object","entries","writing","writing_to","copy_is_writing","Avatar","is_connected","ref","onSubmit","e","preventDefault","trim","Date","toUTCString","getHours","getMinutes","send_message","onChange","target","value","placeholder","LogSign","password","login_Values","set_login_Values","re_password","register_Values","set_register_Values","switcher","set_switcher","loading","set_loading","change_login","name","change_register","error","POST_login","POST_register","App","isConnected","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c75c389f.chunk.js","sourcesContent":["const BaseUrl = 'https://real-chato.herokuapp.com';\r\n\r\nexport default BaseUrl;","import React from 'react';\r\nimport './AlertMessage.css';\r\n\r\nfunction AlertMessage({content, type}) {\r\n    if(content) return (\r\n        <div className={`alert_message ${type === 'error' && 'error'} ${content && 'alert_message_go_down'}`} >\r\n            {content}\r\n        </div>\r\n    )\r\n    else return <div className='alert_message' ></div>\r\n}\r\n\r\nexport default AlertMessage\r\n","import React, { useState } from 'react';\r\nimport './UnseenMsg.css';\r\n\r\nfunction UnseenMsg({ me, view_other_messages, POST_active_user, unseen_messages, length }) {\r\n    const [open_msgs, set_open_msgs] = useState(false);\r\n\r\n    return (\r\n        <>\r\n        <div onClick={() => set_open_msgs(!open_msgs)} className={`unseen_msg_notify ${length !== 0 && 'unseen_msg_notify_go_down'}`} >\r\n            {length} New\r\n        </div>\r\n        <div className={`unseen_msgs ${open_msgs && 'unseen_msgs_go_right'}`}>\r\n            {\r\n                unseen_messages.length !== 0 && (\r\n                    unseen_messages.map((msg, index) => (\r\n                        <div key={index} \r\n                        onClick={() => {\r\n                            localStorage.setItem('active', msg.his_messages[0].info.send_by._id)\r\n                            POST_active_user(msg.his_messages[0].info.send_by._id)\r\n                            view_other_messages({\r\n                                info: { send_by: { _id: msg.his_messages[0].info.send_by._id } },\r\n                                talking_to: {\r\n                                    _id: me._id,\r\n                                    username: me.username\r\n                                }\r\n                            })\r\n                            set_open_msgs(false);\r\n                        }} \r\n                        className=\"unseen_msg\"\r\n                        >\r\n                            <div className=\"unseen_msg_user\">{msg.his_messages[0].info.send_by.username}</div>\r\n                            <p className=\"unseen_msg_content\">{msg.his_messages[msg.his_messages.length - 1].info.content}</p>\r\n                            <div className=\"unseen_msg_length\">{msg.his_messages.length}</div>\r\n                        </div>\r\n                    ))\r\n                )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnseenMsg\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport './MainApp.css';\r\nimport { Avatar } from '@material-ui/core';\r\nimport BaseUrl from '../BaseUrl';\r\nimport io from 'socket.io-client';\r\nimport AlertMessage from '../Components/AlertMessage';\r\nimport { FaEye } from 'react-icons/fa';\r\nimport UnseenMsg from '../Components/UnseenMsg';\r\n\r\nlet socket = io(`${BaseUrl}`);\r\n\r\nfunction MainApp() {\r\n    // states\r\n    const [me, set_me] = useState({});\r\n    const [users, set_users] = useState([]);\r\n    const [active_user, set_active_user] = useState({});\r\n    const [users_go_right, set_users_go_right] = useState(false);\r\n    const [alert_message, set_alert_message] = useState({ type: '', message: '' });\r\n    const [room_messages, set_room_messages] = useState([]);\r\n    const [roomId, set_roomId] = useState('');\r\n    const [message, set_message] = useState('');\r\n    const [unseen_messages, set_unseen_messages] = useState([]);\r\n    const [is_writing, set_is_writing] = useState({});\r\n\r\n    // References\r\n    const room_body = useRef();\r\n\r\n    // check login permission\r\n    useEffect(()  => GET_check_permision(), []);\r\n    function GET_check_permision(){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n        fetch(`${BaseUrl}/api/check_permission`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer${token}` }\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.TokenError){\r\n                localStorage.clear();\r\n                window.location.reload(false);\r\n            }\r\n            if(res.me){\r\n                set_me(res.me);\r\n                GET_unseen_messages();\r\n            }\r\n        })\r\n    }\r\n    // get unseen messages\r\n    function GET_unseen_messages(){\r\n        const token = localStorage.getItem('token') || '';\r\n        fetch(`${BaseUrl}/api/unseen_messages`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer${token}` }\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.TokenError){\r\n                localStorage.clear();\r\n                window.location.reload(false);\r\n            }\r\n            if(res.unseenMessages && res.unseenMessages.length !== 0){\r\n                let copy_unseen_mes = [];\r\n                res.unseenMessages.forEach(msg => {\r\n                    let his_msgs = [];\r\n                    msg.noViewed_messages.forEach(noViewed_msg => {\r\n                        his_msgs.push({\r\n                            info: {\r\n                                send_by: {\r\n                                    _id: msg.talked_to._id,\r\n                                    username: msg.talked_to.username\r\n                                },\r\n                                content: noViewed_msg.content\r\n                            }\r\n                        })\r\n                    })\r\n                    copy_unseen_mes.push({\r\n                        his_messages: his_msgs\r\n                    })\r\n                })\r\n                set_unseen_messages(copy_unseen_mes);\r\n            }\r\n        })\r\n    }\r\n\r\n    // get all users &&\r\n    useEffect(() => {\r\n        if(me){\r\n            socket_connect();\r\n            GET_all_users();\r\n        }   \r\n    }, [me]);\r\n    function GET_all_users(){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n        fetch(`${BaseUrl}/api/all_users`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer${token}` }\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.TokenError){\r\n                localStorage.clear();\r\n                window.location.reload(false);\r\n            }\r\n            if(res.users){\r\n                set_users(res.users)\r\n            }\r\n        })\r\n    }\r\n    function socket_connect(){\r\n        socket.emit('user_connect', { user: me })\r\n        socket.on('welcome', msg => {\r\n            set_alert_message({...alert_message, message: msg})\r\n            setTimeout(() => set_alert_message({ type: '', message: '' }), 3000)\r\n        } )\r\n        socket.on('someoneConnected', msg => {\r\n            set_alert_message({...alert_message, message: msg});\r\n            setTimeout(() => set_alert_message({ type: '', message: '' }), 3000);\r\n            GET_all_users();\r\n        } )\r\n    }\r\n\r\n    // get_active_user\r\n    function POST_active_user(userId){\r\n\r\n        fetch(`${BaseUrl}/api/active_user`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ userId })\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.active_user){\r\n                set_active_user(res.active_user)\r\n                POST_create_room(res.active_user._id);\r\n            }\r\n        })\r\n    }\r\n\r\n    // change room\r\n    function POST_create_room(userId){\r\n        const token = localStorage.getItem('token') || '';\r\n            \r\n        fetch(`${BaseUrl}/api/create_room`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer${token}`\r\n            },\r\n            body: JSON.stringify({ userId })\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.TokenError){\r\n                console.log('errorToken')\r\n                localStorage.clear();\r\n                window.location.reload(false);\r\n            }\r\n            if(res.yourRoom){\r\n                set_room_messages([])\r\n                POST_room_messages(res.yourRoom._id)\r\n                set_roomId(res.yourRoom._id)\r\n            }\r\n            if(res.newRoom){\r\n                set_room_messages([])\r\n                POST_room_messages(res.newRoom._id)\r\n                set_roomId(res.newRoom._id)\r\n            }\r\n            })\r\n    }\r\n\r\n    function POST_room_messages(roomId){\r\n\r\n        const token = localStorage.getItem('token') || '';\r\n        fetch(`${BaseUrl}/api/room_messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer${token}`\r\n            },\r\n            body: JSON.stringify({roomId})\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.TokenError){\r\n                console.log('errorToken')\r\n                localStorage.clear();\r\n                window.location.reload(false);\r\n            }\r\n            if(res.RoomMessages){\r\n                let un_messages = []\r\n                res.RoomMessages.forEach((msg, index) => {\r\n                    un_messages.push({\r\n                        info : {\r\n                            send_by: { \r\n                                username: msg.msg.send_by.username, \r\n                                _id: msg.msg.send_by._id \r\n                            },\r\n                            content: msg.msg.content,\r\n                            Date_created_at: msg.msg.Date_created_at,\r\n                            Time_created_at: msg.msg.Time_created_at,\r\n                            viewed: msg.msg.viewed\r\n                        },\r\n                        talking_to: {\r\n                            username: res.talkingWith.username, \r\n                            _id: res.talkingWith._id \r\n                        },\r\n                        is_mine: msg.isMsgMine\r\n                    })\r\n                })\r\n                set_room_messages(un_messages)\r\n            }\r\n        })\r\n    }\r\n\r\n    // scroll bottom\r\n    useEffect(() => {\r\n        room_body.current.scrollTop = room_body.current.scrollHeight;\r\n    }, [room_messages])\r\n\r\n    // send message\r\n    socket.off('setting_message').on('setting_message', data => {\r\n        data.msg.is_mine = me._id === data.msg.info.send_by._id;\r\n        if(active_user._id === data.msg.info.send_by._id){\r\n            view_other_messages(data.msg);\r\n            set_room_messages([...room_messages, data.msg]);\r\n        }\r\n        else{\r\n            set_alert_message({ type: '', message: 'New message' })\r\n            setTimeout(() => set_alert_message({ type: '', message: '' }), 3000)\r\n\r\n            if(unseen_messages.length !== 0){\r\n                let copy_unseen_msg = [...unseen_messages];\r\n                let msg_user_found = false;\r\n\r\n                copy_unseen_msg.map(msg => {\r\n                    if(data.msg.info.send_by._id === msg.his_messages[0].info.send_by._id){\r\n                        msg.his_messages.push(data.msg);\r\n                        msg_user_found = true;\r\n                        return;\r\n                    }\r\n                })\r\n                if(msg_user_found) {\r\n                    set_unseen_messages(copy_unseen_msg);\r\n                    msg_user_found = false;\r\n                }\r\n                else{\r\n                    set_unseen_messages([{\r\n                        his_messages: [data.msg]\r\n                    }, ...unseen_messages]);\r\n                    msg_user_found = false;\r\n                }\r\n            }\r\n            else{\r\n                set_unseen_messages([{\r\n                    his_messages: [data.msg]\r\n                }, ...unseen_messages]);\r\n            }\r\n        }\r\n    } );\r\n    function send_message(e){\r\n        e.preventDefault();\r\n\r\n        if(message && Object.entries(active_user).length !== 0 && roomId !== '')\r\n        {\r\n            console.log('send')\r\n            // send to other client\r\n            const msg = {\r\n                info : {\r\n                    send_by: { \r\n                        username: me.username, \r\n                        _id: me._id \r\n                    },\r\n                    content: message.trim(),\r\n                    Date_created_at: new Date().toUTCString(),\r\n                    Time_created_at: `${new Date().getHours()}:${new Date().getMinutes()}`,\r\n                    viewed: false\r\n                },\r\n                talking_to: {\r\n                    username: active_user.username, \r\n                    _id: active_user._id \r\n                },\r\n                is_mine: true,\r\n            }\r\n            set_room_messages([...room_messages, msg]);\r\n            socket.emit('getting_message', { msg });\r\n\r\n            // Store message\r\n            const token = localStorage.getItem('token') || '';\r\n            fetch(`${BaseUrl}/api/add_message`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer${token}`\r\n                },\r\n                body: JSON.stringify({ \r\n                    roomId, \r\n                    content: message.trim()\r\n                })\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if(res.TokenError){\r\n                    console.log('errorToken')\r\n                    localStorage.clear();\r\n                    window.location.reload(false);\r\n                }\r\n            })\r\n\r\n            // clear input\r\n            set_message('');\r\n        }\r\n    }\r\n\r\n    // view other message && my messages viewed\r\n    useEffect(() => {\r\n        let still_unseen_messages = unseen_messages.filter(msg => msg.his_messages[0].info.send_by._id !== active_user._id);\r\n        set_unseen_messages(still_unseen_messages);\r\n    }, [active_user])\r\n    \r\n    function view_other_messages(msg_viewed){\r\n        socket.emit('view_message', msg_viewed);\r\n    }\r\n    socket.off('msg_viewed').on('msg_viewed', data => {\r\n        if(active_user._id === data.viewed_by._id){\r\n            let room_msg_copy = [...room_messages];\r\n            let iterations = 0;\r\n            for(let i=room_msg_copy.length - 1 ; i >= 0 ; i--){\r\n                if(iterations === 20) break;\r\n                if(room_msg_copy[i].info.send_by._id === me._id){\r\n                    room_msg_copy[i].info.viewed = data.bool_viewed;\r\n                    iterations++;\r\n                }\r\n                else continue;\r\n            }\r\n            set_room_messages(room_msg_copy);\r\n        }\r\n    });\r\n\r\n    // is writing\r\n    useEffect(() => {\r\n        if(Object.entries(me).length !== 0 && Object.entries(active_user).length !== 0){\r\n            socket.emit('isWriting', { writing: me, writing_to: active_user, is_writing: message })\r\n        }\r\n    }, [message]);\r\n    socket.off('someoneWriting').on('someoneWriting', data => {\r\n        if(data.is_writing){\r\n            set_is_writing({...is_writing, [data.writing._id]: data.is_writing})\r\n        }\r\n        else{\r\n            let copy_is_writing = {...is_writing};\r\n            delete copy_is_writing[data.writing._id];\r\n            set_is_writing(copy_is_writing);\r\n        }\r\n    })\r\n\r\n    if(me) return (\r\n        <>\r\n        <AlertMessage content={alert_message.message} type={alert_message.type} />\r\n        <UnseenMsg me={me} view_other_messages={view_other_messages} POST_active_user={POST_active_user} unseen_messages={unseen_messages} set_unseen_messages={set_unseen_messages} length={unseen_messages.length} />\r\n\r\n        <div onClick={() => set_users_go_right(!users_go_right)} className=\"set_users_go_right\">{users_go_right ? '<' : '>'}</div>\r\n        <div className='main_app' >\r\n            {/* part1: users list */}\r\n            <div className={`users ${users_go_right && 'users_go_right'}`}>\r\n                <div onClick={() => {\r\n                    localStorage.clear();\r\n                    window.location.reload(false);\r\n                }} className=\"me\">{me.username}</div>\r\n                <div className=\"users_list\">\r\n                    {\r\n                        users.length !== 0 && (\r\n                            users.map(user => (\r\n                                <div \r\n                                onClick={() => {\r\n                                    localStorage.setItem('active', user._id)\r\n                                    POST_active_user(user._id)\r\n                                    view_other_messages({\r\n                                        info: { send_by: { _id: user._id } },\r\n                                        talking_to: { \r\n                                            _id: me._id,\r\n                                            username: me.username\r\n                                         }\r\n                                    })\r\n                                    set_users_go_right(false)\r\n                                }} \r\n                                key={user._id} className=\"user\">\r\n                                <Avatar className='avatar' \r\n                                />\r\n                                    {\r\n                                        user.is_connected && (\r\n                                        <div className=\"connected\"></div>\r\n                                        )\r\n                                    }\r\n                                    <div className=\"flex\">\r\n                                        <p>{user.username}</p>\r\n                                        {\r\n                                        (user._id in is_writing) && (\r\n                                            <div className=\"isWriting\">is writing...</div>\r\n                                        )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            {/* part2: room */}\r\n            <div className=\"room\">\r\n                <div className=\"room_header\">\r\n                    {\r\n                        active_user && (\r\n                            <>\r\n                            <Avatar className='avatar' />\r\n                            { active_user.is_connected && <div className=\"connected\"></div> }\r\n                            <p>{active_user.username}</p>\r\n                            </>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div ref={room_body} className=\"room_body\">\r\n                    {\r\n                        room_messages.length !== 0 && (\r\n                            room_messages.map((msg, index) => (\r\n                                <div key={index} className={`message ${msg.is_mine && 'msg_mine'}`}>\r\n                                    <div className=\"message_user\">{msg.info.send_by.username}</div>\r\n                                    <p>{msg.info.content}</p>\r\n                                    <div className=\"time\">{msg.info.Time_created_at}</div>\r\n                                    {\r\n                                        msg.is_mine && (\r\n                                        <div className={`msg_is_viewed ${msg.info.viewed && 'msg_viewed'}`}><FaEye /></div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                {/* send message */}\r\n                <form onSubmit={(e) => send_message(e)} className=\"room_footer\">\r\n                    <input onChange={(e) => set_message(e.target.value) } type=\"text\" placeholder='Send message...' value={message} />\r\n                    <button type='submit' >Send</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n    else return <div></div>\r\n}\r\n\r\nexport default MainApp\r\n","import React, { useState } from 'react';\r\nimport './LogSign.css';\r\nimport BaseUrl from '../BaseUrl';\r\nimport AlertMessage from '../Components/AlertMessage';\r\n\r\nfunction LogSign() {\r\n    const [login_Values, set_login_Values] = useState({\r\n        username: '',\r\n        password: ''\r\n    })\r\n    const [register_Values, set_register_Values] = useState({\r\n        username: '',\r\n        password: '',\r\n        re_password: ''\r\n    })\r\n    const [switcher, set_switcher] = useState(false);\r\n    const [alert_message, set_alert_message] = useState({\r\n        type: '',\r\n        message: ''\r\n    })\r\n    const [loading, set_loading] = useState(false);\r\n\r\n    function change_login(e){ set_login_Values({...login_Values, [e.target.name]: e.target.value}) }\r\n    function change_register(e){ set_register_Values({...register_Values, [e.target.name]: e.target.value}) }\r\n\r\n    function POST_login(e){\r\n        e.preventDefault()\r\n\r\n        set_loading(true)\r\n        fetch(`${BaseUrl}/api/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(login_Values)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.error)\r\n            {\r\n                set_alert_message({ type: 'error', message: res.error })\r\n                setTimeout(() => set_alert_message({ type: '', message: '' }) , 5000)\r\n                set_loading(false)\r\n            }\r\n            if(res.message)\r\n            {\r\n                set_alert_message({ type: 'success', message: res.message })\r\n                setTimeout(() => set_alert_message({ type: '', message: '' }) , 5000)\r\n                set_loading(false)\r\n                localStorage.setItem('token', res.token)\r\n                window.location.reload(false);\r\n                set_login_Values({\r\n                    username: '',\r\n                    password: ''\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    function POST_register(e){\r\n        e.preventDefault()\r\n\r\n        set_loading(true)\r\n        fetch(`${BaseUrl}/api/register`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(register_Values)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.error)\r\n            {\r\n                set_alert_message({ type: 'error', message: res.error })\r\n                setTimeout(() => set_alert_message({ type: '', message: '' }) , 5000)\r\n                set_loading(false)\r\n            }\r\n            if(res.message)\r\n            {\r\n                set_alert_message({ type: 'success', message: res.message })\r\n                setTimeout(() => set_alert_message({ type: '', message: '' }) , 5000)\r\n                set_loading(false)\r\n                set_login_Values({\r\n                    username: register_Values.username,\r\n                    password: register_Values.password\r\n                })\r\n                set_register_Values({\r\n                    username: '',\r\n                    password: '',\r\n                    re_password: ''\r\n                })\r\n                set_switcher(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <AlertMessage content={alert_message.message} type={alert_message.type} />\r\n        <div className='logsign'>\r\n            <div className=\"header\">\r\n                RealChat\r\n            </div>\r\n\r\n            <div className=\"logsign_container\">\r\n                <form onSubmit={(e) => POST_login(e)} className={`login ${switcher && 'hide_logsign'}`}>\r\n                    <input onChange={(e) => change_login(e)} type=\"text\" name='username' placeholder='username...' value={login_Values.username} />\r\n                    <input onChange={(e) => change_login(e)} type=\"password\" name='password' placeholder='password...' value={login_Values.password} />\r\n                    <button className={loading ? 'btn btn_loading' : 'btn'} type='submit'>{ loading ? 'Loding...' : 'Login'}</button>\r\n                </form>\r\n\r\n                <form onSubmit={(e) => POST_register(e)} className={`register ${!switcher && 'hide_logsign'}`}>\r\n                    <input onChange={(e) => change_register(e)} type=\"text\" name='username' placeholder='username...' value={register_Values.username} />\r\n                    <input onChange={(e) => change_register(e)} type=\"password\" name='password' placeholder='password...' value={register_Values.password} />\r\n                    <input onChange={(e) => change_register(e)} type=\"password\" name='re_password' placeholder='Confirm password...' value={register_Values.re_password} />\r\n                    <button className={loading ? 'btn btn_loading' : 'btn'} type='submit'>{loading ? 'Registering...' : 'Register'}</button>\r\n                </form>\r\n            </div>\r\n            \r\n            <div onClick={() => set_switcher(!switcher)} className=\"switcher\">{switcher ? \"Already \" : \"don't \"}have account?</div>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LogSign\r\n","import React from 'react';\nimport './App.css';\nimport MainApp from './Pages/MainApp';\nimport LogSign from './Pages/LogSign';\n\nfunction App() {\n  \n  const isConnected = !!localStorage.getItem('token') || false;\n\n  return (\n    <div className=\"app\">\n      { isConnected ? <MainApp /> : <LogSign /> }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}